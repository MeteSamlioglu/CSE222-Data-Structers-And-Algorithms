public static boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static int PrimeChecker(int num) {
        String digits = String.valueOf(num);
        List<Integer> permutations = new ArrayList<>();
        generatePermutations(digits.toCharArray(), 0, permutations);

        for (int perm : permutations) {
            if (isPrime(perm)) {
                return 1;
            }
        }
        return 0;
    }

    public static void generatePermutations(char[] digits, int index, List<Integer> permutations) {
        if (index == digits.length - 1) {
            permutations.add(Integer.parseInt(String.valueOf(digits)));
        } else {
            for (int i = index; i < digits.length; i++) {
                swap(digits, index, i);
                generatePermutations(digits, index + 1, permutations);
                swap(digits, index, i); // backtrack
            }
        }
    }

    public static void swap(char[] arr, int i, int j) {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void main(String[] args) {
        int num = 80;
        int result = PrimeChecker(num);
        System.out.println(result);
}